{"version":3,"file":"nft-card.js","sources":["../node_modules/lit-html/lib/directive.js","../node_modules/lit-html/lib/dom.js","../node_modules/lit-html/lib/part.js","../node_modules/lit-html/lib/template.js","../node_modules/lit-html/lib/template-instance.js","../node_modules/lit-html/lib/template-result.js","../node_modules/lit-html/lib/parts.js","../node_modules/lit-html/lib/default-template-processor.js","../node_modules/lit-html/lib/template-factory.js","../node_modules/lit-html/lib/render.js","../node_modules/lit-html/lit-html.js","../node_modules/lit-html/lib/modify-template.js","../node_modules/lit-html/lib/shady-render.js","../node_modules/lit-element/lib/updating-element.js","../node_modules/lit-element/lib/decorators.js","../node_modules/lit-element/lib/css-tag.js","../node_modules/lit-element/lit-element.js","../node_modules/rollup-plugin-node-globals/src/global.js","../node_modules/ky/index.js","../node_modules/lit-html/directives/style-map.js","../src/pill.ts","../src/nft-card-front.ts","../src/nft-card-back.ts","../src/nft-card.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari dooes not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\nconst commentMarker = ` ${marker} `;\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment poisition.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceeding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceeding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? commentMarker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // tslint:disable-next-line:no-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attibute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        // If `value` isn't already a string, we explicitly convert it here in case\n        // it can't be implicitly converted - i.e. it's a symbol.\n        const valueAsString = typeof value === 'string' ? value : String(value);\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = valueAsString;\n        }\n        else {\n            this.__commitNode(document.createTextNode(valueAsString));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.1.2');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module shady-render\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected. ` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (scopeName, renderedDOM, template) => {\n    shadyRenderSet.add(scopeName);\n    // If `renderedDOM` is stamped from a Template, then we need to edit that\n    // Template's underlying template element. Otherwise, we create one here\n    // to give to ShadyCSS, which still requires one while scoping.\n    const templateElement = !!template ? template.element : document.createElement('template');\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    const { length } = styles;\n    // If there are no styles, skip unnecessary work\n    if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        //\n        // ShadyCSS will only update styles containing @apply in the template\n        // given to `prepareTemplateStyles`. If no lit Template was given,\n        // ShadyCSS will not be able to update uses of @apply in any relevant\n        // template. However, this is not a problem because we only create the\n        // template for the purpose of supporting `prepareAdoptedCssText`,\n        // which doesn't support @apply at all.\n        window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    const content = templateElement.content;\n    if (!!template) {\n        insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n    }\n    else {\n        content.insertBefore(condensedStyle, content.firstChild);\n    }\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n    const style = content.querySelector('style');\n    if (window.ShadyCSS.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else if (!!template) {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render = (result, container, options) => {\n    if (!options || typeof options !== 'object' || !options.scopeName) {\n        throw new Error('The `scopeName` option is required.');\n    }\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    const needsScoping = compatibleShadyCSSVersion &&\n        container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n        !!container.host;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    litRender(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We've rendered into a fragment so that there's a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element's `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = parts.get(renderContainer);\n        parts.delete(renderContainer);\n        // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)\n        // that should apply to `renderContainer` even if the rendered value is\n        // not a TemplateInstance. However, it will only insert scoped styles\n        // into the document if `prepareTemplateStyles` has already been called\n        // for the given scope name.\n        const template = part.value instanceof TemplateInstance ?\n            part.value.template :\n            undefined;\n        prepareTemplateStyles(scopeName, renderContainer, template);\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nvar _a;\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    (prop, _obj) => prop;\nexport const defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value ? '' : null;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                return value == null ? value : JSON.stringify(value);\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case Number:\n                return value === null ? null : Number(value);\n            case Object:\n            case Array:\n                return JSON.parse(value);\n        }\n        return value;\n    }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst microtaskPromise = Promise.resolve(true);\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\nconst STATE_HAS_CONNECTED = 1 << 5;\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        this._updatePromise = microtaskPromise;\n        this._hasConnectedResolver = undefined;\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this._classProperties.forEach((v, p) => {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Ensures the private `_classProperties` property metadata is created.\n     * In addition to `finalize` this is also called in `createProperty` to\n     * ensure the `@property` decorator can add property metadata.\n     */\n    /** @nocollapse */\n    static _ensureClassProperties() {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     * @nocollapse\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure storage exists for property\n        // metadata.\n        this._ensureClassProperties();\n        this._classProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        Object.defineProperty(this.prototype, name, {\n            // tslint:disable-next-line:no-any no symbol in index\n            get() {\n                return this[key];\n            },\n            set(value) {\n                const oldValue = this[name];\n                this[key] = value;\n                this._requestUpdate(name, oldValue);\n            },\n            configurable: true,\n            enumerable: true\n        });\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (!superCtor.hasOwnProperty(finalized)) {\n            superCtor.finalize();\n        }\n        this[finalized] = true;\n        this._ensureClassProperties();\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...(typeof Object.getOwnPropertySymbols === 'function') ?\n                    Object.getOwnPropertySymbols(props) :\n                    []\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeSript lack of support for symbol in\n                // index types\n                // tslint:disable-next-line:no-any no symbol in index\n                this.createProperty(p, props[p]);\n            }\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false ?\n            undefined :\n            (typeof attribute === 'string' ?\n                attribute :\n                (typeof name === 'string' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     * @nocollapse\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's\n     * `converter` or `converter.fromAttribute` property option.\n     * @nocollapse\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options.type;\n        const converter = options.converter || defaultConverter;\n        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);\n        return fromAttribute ? fromAttribute(value, type) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     * @nocollapse\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options.reflect === undefined) {\n            return;\n        }\n        const type = options.type;\n        const converter = options.converter;\n        const toAttribute = converter && converter.toAttribute ||\n            defaultConverter.toAttribute;\n        return toAttribute(value, type);\n    }\n    /**\n     * Performs element initialization. By default captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this._saveInstanceProperties();\n        // ensures first update will be caught by an early access of\n        // `updateComplete`\n        this._requestUpdate();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor\n            ._classProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        });\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // tslint:disable-next-line:no-any\n        this._instanceProperties.forEach((v, p) => this[p] = v);\n        this._instanceProperties = undefined;\n    }\n    connectedCallback() {\n        this._updateState = this._updateState | STATE_HAS_CONNECTED;\n        // Ensure first connection completes an update. Updates cannot complete\n        // before connection and if one is pending connection the\n        // `_hasConnectionResolver` will exist. If so, resolve it to complete the\n        // update, otherwise requestUpdate.\n        if (this._hasConnectedResolver) {\n            this._hasConnectedResolver();\n            this._hasConnectedResolver = undefined;\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() {\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attr = ctor._attributeNameForProperty(name, options);\n        if (attr !== undefined) {\n            const attrValue = ctor._propertyValueToAttribute(value, options);\n            // an undefined value does not change the attribute.\n            if (attrValue === undefined) {\n                return;\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n            return;\n        }\n        const ctor = this.constructor;\n        const propName = ctor._attributeToPropertyMap.get(name);\n        if (propName !== undefined) {\n            const options = ctor._classProperties.get(propName) || defaultPropertyDeclaration;\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n            this[propName] =\n                // tslint:disable-next-line:no-any\n                ctor._propertyValueFromAttribute(value, options);\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n        }\n    }\n    /**\n     * This private version of `requestUpdate` does not access or return the\n     * `updateComplete` promise. This promise can be overridden and is therefore\n     * not free to access.\n     */\n    _requestUpdate(name, oldValue) {\n        let shouldRequestUpdate = true;\n        // If we have a property key, perform property update steps.\n        if (name !== undefined) {\n            const ctor = this.constructor;\n            const options = ctor._classProperties.get(name) || defaultPropertyDeclaration;\n            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n                if (!this._changedProperties.has(name)) {\n                    this._changedProperties.set(name, oldValue);\n                }\n                // Add to reflecting properties set.\n                // Note, it's important that every change has a chance to add the\n                // property to `_reflectingProperties`. This ensures setting\n                // attribute + property reflects correctly.\n                if (options.reflect === true &&\n                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n                    if (this._reflectingProperties === undefined) {\n                        this._reflectingProperties = new Map();\n                    }\n                    this._reflectingProperties.set(name, options);\n                }\n            }\n            else {\n                // Abort the request if the property should not be considered changed.\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n            this._enqueueUpdate();\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        this._requestUpdate(name, oldValue);\n        return this.updateComplete;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async _enqueueUpdate() {\n        // Mark state updating...\n        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n        let resolve;\n        let reject;\n        const previousUpdatePromise = this._updatePromise;\n        this._updatePromise = new Promise((res, rej) => {\n            resolve = res;\n            reject = rej;\n        });\n        try {\n            // Ensure any previous update has resolved before updating.\n            // This `await` also ensures that property changes are batched.\n            await previousUpdatePromise;\n        }\n        catch (e) {\n            // Ignore any previous errors. We only care that the previous cycle is\n            // done. Any error should have been handled in the previous update.\n        }\n        // Make sure the element has connected before updating.\n        if (!this._hasConnected) {\n            await new Promise((res) => this._hasConnectedResolver = res);\n        }\n        try {\n            const result = this.performUpdate();\n            // If `performUpdate` returns a Promise, we await it. This is done to\n            // enable coordinating updates with a scheduler. Note, the result is\n            // checked to avoid delaying an additional microtask unless we need to.\n            if (result != null) {\n                await result;\n            }\n        }\n        catch (e) {\n            reject(e);\n        }\n        resolve(!this._hasRequestedUpdate);\n    }\n    get _hasConnected() {\n        return (this._updateState & STATE_HAS_CONNECTED);\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    get hasUpdated() {\n        return (this._updateState & STATE_HAS_UPDATED);\n    }\n    /**\n     * Performs an element update. Note, if an exception is thrown during the\n     * update, `firstUpdated` and `updated` will not be called.\n     *\n     * You can override this method to change the timing of updates. If this\n     * method is overridden, `super.performUpdate()` must be called.\n     *\n     * For instance, to schedule updates to occur just before the next frame:\n     *\n     * ```\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     */\n    performUpdate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        let shouldUpdate = false;\n        const changedProperties = this._changedProperties;\n        try {\n            shouldUpdate = this.shouldUpdate(changedProperties);\n            if (shouldUpdate) {\n                this.update(changedProperties);\n            }\n        }\n        catch (e) {\n            // Prevent `firstUpdated` and `updated` from running when there's an\n            // update exception.\n            shouldUpdate = false;\n            throw e;\n        }\n        finally {\n            // Ensure element can accept additional updates after an exception.\n            this._markUpdated();\n        }\n        if (shouldUpdate) {\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. If the Promise is rejected, an\n     * exception was thrown during the update.\n     *\n     * To await additional asynchronous work, override the `_getUpdateComplete`\n     * method. For example, it is sometimes useful to await a rendered element\n     * before fulfilling this Promise. To do this, first await\n     * `super._getUpdateComplete()`, then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._getUpdateComplete();\n    }\n    /**\n     * Override point for the `updateComplete` promise.\n     *\n     * It is not safe to override the `updateComplete` getter directly due to a\n     * limitation in TypeScript which means it is not possible to call a\n     * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n     * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n     * This method should be overridden instead. For example:\n     *\n     *   class MyElement extends LitElement {\n     *     async _getUpdateComplete() {\n     *       await super._getUpdateComplete();\n     *       await this._myChild.updateComplete;\n     *     }\n     *   }\n     */\n    _getUpdateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n            this._reflectingProperties = undefined;\n        }\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) {\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) {\n    }\n}\n_a = finalized;\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement[_a] = true;\n//# sourceMappingURL=updating-element.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst legacyCustomElement = (tagName, clazz) => {\n    window.customElements.define(tagName, clazz);\n    // Cast as any because TS doesn't recognize the return type as being a\n    // subtype of the decorated class when clazz is typed as\n    // `Constructor<HTMLElement>` for some reason.\n    // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n    // applied to elements however.\n    // tslint:disable-next-line:no-any\n    return clazz;\n};\nconst standardCustomElement = (tagName, descriptor) => {\n    const { kind, elements } = descriptor;\n    return {\n        kind,\n        elements,\n        // This callback is called once the class is otherwise fully defined\n        finisher(clazz) {\n            window.customElements.define(tagName, clazz);\n        }\n    };\n};\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * @param tagName the name of the custom element to define\n */\nexport const customElement = (tagName) => (classOrDescriptor) => (typeof classOrDescriptor === 'function') ?\n    legacyCustomElement(tagName, classOrDescriptor) :\n    standardCustomElement(tagName, classOrDescriptor);\nconst standardProperty = (options, element) => {\n    // When decorating an accessor, pass it through and add property metadata.\n    // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\n    // stomp over the user's accessor.\n    if (element.kind === 'method' && element.descriptor &&\n        !('value' in element.descriptor)) {\n        return Object.assign({}, element, { finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            } });\n    }\n    else {\n        // createProperty() takes care of defining the property, but we still\n        // must return some kind of descriptor, so return a descriptor for an\n        // unused prototype field. The finisher calls createProperty().\n        return {\n            kind: 'field',\n            key: Symbol(),\n            placement: 'own',\n            descriptor: {},\n            // When @babel/plugin-proposal-decorators implements initializers,\n            // do this instead of the initializer below. See:\n            // https://github.com/babel/babel/issues/9260 extras: [\n            //   {\n            //     kind: 'initializer',\n            //     placement: 'own',\n            //     initializer: descriptor.initializer,\n            //   }\n            // ],\n            initializer() {\n                if (typeof element.initializer === 'function') {\n                    this[element.key] = element.initializer.call(this);\n                }\n            },\n            finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            }\n        };\n    }\n};\nconst legacyProperty = (options, proto, name) => {\n    proto.constructor\n        .createProperty(name, options);\n};\n/**\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A `PropertyDeclaration` may optionally be\n * supplied to configure property features.\n *\n * @ExportDecoratedItems\n */\nexport function property(options) {\n    // tslint:disable-next-line:no-any decorator\n    return (protoOrDescriptor, name) => (name !== undefined) ?\n        legacyProperty(options, protoOrDescriptor, name) :\n        standardProperty(options, protoOrDescriptor);\n}\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @ExportDecoratedItems\n */\nexport function query(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return this.renderRoot.querySelector(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n *\n * @ExportDecoratedItems\n */\nexport function queryAll(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return this.renderRoot.querySelectorAll(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\nconst legacyQuery = (descriptor, proto, name) => {\n    Object.defineProperty(proto, name, descriptor);\n};\nconst standardQuery = (descriptor, element) => ({\n    kind: 'method',\n    placement: 'prototype',\n    key: element.key,\n    descriptor,\n});\nconst standardEventOptions = (options, element) => {\n    return Object.assign({}, element, { finisher(clazz) {\n            Object.assign(clazz.prototype[element.key], options);\n        } });\n};\nconst legacyEventOptions = \n// tslint:disable-next-line:no-any legacy decorator\n(options, proto, name) => {\n    Object.assign(proto[name], options);\n};\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifis event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n *\n *     class MyElement {\n *\n *       clicked = false;\n *\n *       render() {\n *         return html`<div @click=${this._onClick}`><button></button></div>`;\n *       }\n *\n *       @eventOptions({capture: true})\n *       _onClick(e) {\n *         this.clicked = true;\n *       }\n *     }\n */\nexport const eventOptions = (options) => \n// Return value typed as any to prevent TypeScript from complaining that\n// standard decorator function signature does not match TypeScript decorator\n// signature\n// TODO(kschaaf): unclear why it was only failing on this decorator and not\n// the others\n((protoOrDescriptor, name) => (name !== undefined) ?\n    legacyEventOptions(options, protoOrDescriptor, name) :\n    standardEventOptions(options, protoOrDescriptor));\n//# sourceMappingURL=decorators.js.map","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nexport const supportsAdoptingStyleSheets = ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nexport class CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n            // is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else if (typeof value === 'number') {\n        return value;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { TemplateResult } from 'lit-html';\nimport { render } from 'lit-html/lib/shady-render.js';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg, TemplateResult, SVGTemplateResult } from 'lit-html/lit-html.js';\nimport { supportsAdoptingStyleSheets } from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.2.1');\n/**\n * Minimal implementation of Array.prototype.flat\n * @param arr the array to flatten\n * @param result the accumlated result\n */\nfunction arrayFlat(styles, result = []) {\n    for (let i = 0, length = styles.length; i < length; i++) {\n        const value = styles[i];\n        if (Array.isArray(value)) {\n            arrayFlat(value, result);\n        }\n        else {\n            result.push(value);\n        }\n    }\n    return result;\n}\n/** Deeply flattens styles array. Uses native flat if available. */\nconst flattenStyles = (styles) => styles.flat ? styles.flat(Infinity) : arrayFlat(styles);\nexport class LitElement extends UpdatingElement {\n    /** @nocollapse */\n    static finalize() {\n        // The Closure JS Compiler does not always preserve the correct \"this\"\n        // when calling static super methods (b/137460243), so explicitly bind.\n        super.finalize.call(this);\n        // Prepare styling that is stamped at first render time. Styling\n        // is built from user provided `styles` or is inherited from the superclass.\n        this._styles =\n            this.hasOwnProperty(JSCompiler_renameProperty('styles', this)) ?\n                this._getUniqueStyles() :\n                this._styles || [];\n    }\n    /** @nocollapse */\n    static _getUniqueStyles() {\n        // Take care not to call `this.styles` multiple times since this generates\n        // new CSSResults each time.\n        // TODO(sorvell): Since we do not cache CSSResults by input, any\n        // shared styles will generate new stylesheet objects, which is wasteful.\n        // This should be addressed when a browser ships constructable\n        // stylesheets.\n        const userStyles = this.styles;\n        const styles = [];\n        if (Array.isArray(userStyles)) {\n            const flatStyles = flattenStyles(userStyles);\n            // As a performance optimization to avoid duplicated styling that can\n            // occur especially when composing via subclassing, de-duplicate styles\n            // preserving the last item in the list. The last item is kept to\n            // try to preserve cascade order with the assumption that it's most\n            // important that last added styles override previous styles.\n            const styleSet = flatStyles.reduceRight((set, s) => {\n                set.add(s);\n                // on IE set.add does not return the set.\n                return set;\n            }, new Set());\n            // Array.from does not work on Set in IE\n            styleSet.forEach((v) => styles.unshift(v));\n        }\n        else if (userStyles) {\n            styles.push(userStyles);\n        }\n        return styles;\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        super.initialize();\n        this.renderRoot =\n            this.createRenderRoot();\n        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n        // element's getRootNode(). While this could be done, we're choosing not to\n        // support this now since it would require different logic around de-duping.\n        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n            this.adoptStyles();\n        }\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Applies styling to the element shadowRoot using the `static get styles`\n     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n     * available and will fallback otherwise. When Shadow DOM is polyfilled,\n     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n     * is available but `adoptedStyleSheets` is not, styles are appended to the\n     * end of the `shadowRoot` to [mimic spec\n     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n     */\n    adoptStyles() {\n        const styles = this.constructor._styles;\n        if (styles.length === 0) {\n            return;\n        }\n        // There are three separate cases here based on Shadow DOM support.\n        // (1) shadowRoot polyfilled: use ShadyCSS\n        // (2) shadowRoot.adoptedStyleSheets available: use it.\n        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n        // rendering\n        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);\n        }\n        else if (supportsAdoptingStyleSheets) {\n            this.renderRoot.adoptedStyleSheets =\n                styles.map((s) => s.styleSheet);\n        }\n        else {\n            // This must be done after rendering so the actual style insertion is done\n            // in `update`.\n            this._needsShimAdoptedStyleSheets = true;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        if (this.hasUpdated && window.ShadyCSS !== undefined) {\n            window.ShadyCSS.styleElement(this);\n        }\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        super.update(changedProperties);\n        const templateResult = this.render();\n        if (templateResult instanceof TemplateResult) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n        // When native Shadow DOM is used but adoptedStyles are not supported,\n        // insert styling after rendering to ensure adoptedStyles have highest\n        // priority.\n        if (this._needsShimAdoptedStyleSheets) {\n            this._needsShimAdoptedStyleSheets = false;\n            this.constructor._styles.forEach((s) => {\n                const style = document.createElement('style');\n                style.textContent = s.cssText;\n                this.renderRoot.appendChild(style);\n            });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method must return\n     * a lit-html TemplateResult. Setting properties inside this method will *not*\n     * trigger the element to update.\n     */\n    render() {\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n *\n * Note this property name is a string to prevent breaking Closure JS Compiler\n * optimizations. See updating-element.ts for more information.\n */\nLitElement['finalized'] = true;\n/**\n * Render method used to render the lit-html TemplateResult to the element's\n * DOM.\n * @param {TemplateResult} Template to render.\n * @param {Element|DocumentFragment} Node into which to render.\n * @param {String} Element name.\n * @nocollapse\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map","export default (typeof global !== \"undefined\" ? global :\n            typeof self !== \"undefined\" ? self :\n            typeof window !== \"undefined\" ? window : {});\n","/*! MIT License © Sindre Sorhus */\n\nconst globals = {};\n\nconst getGlobal = property => {\n\t/* istanbul ignore next */\n\tif (typeof self !== 'undefined' && self && property in self) {\n\t\treturn self;\n\t}\n\n\t/* istanbul ignore next */\n\tif (typeof window !== 'undefined' && window && property in window) {\n\t\treturn window;\n\t}\n\n\tif (typeof global !== 'undefined' && global && property in global) {\n\t\treturn global;\n\t}\n\n\t/* istanbul ignore next */\n\tif (typeof globalThis !== 'undefined' && globalThis) {\n\t\treturn globalThis;\n\t}\n};\n\nconst globalProperties = [\n\t'Headers',\n\t'Request',\n\t'Response',\n\t'ReadableStream',\n\t'fetch',\n\t'AbortController',\n\t'FormData'\n];\n\nfor (const property of globalProperties) {\n\tObject.defineProperty(globals, property, {\n\t\tget() {\n\t\t\tconst globalObject = getGlobal(property);\n\t\t\tconst value = globalObject && globalObject[property];\n\t\t\treturn typeof value === 'function' ? value.bind(globalObject) : value;\n\t\t}\n\t});\n}\n\nconst isObject = value => value !== null && typeof value === 'object';\nconst supportsAbortController = typeof globals.AbortController === 'function';\nconst supportsStreams = typeof globals.ReadableStream === 'function';\n\nconst deepMerge = (...sources) => {\n\tlet returnValue = {};\n\n\tfor (const source of sources) {\n\t\tif (Array.isArray(source)) {\n\t\t\tif (!(Array.isArray(returnValue))) {\n\t\t\t\treturnValue = [];\n\t\t\t}\n\n\t\t\treturnValue = [...returnValue, ...source];\n\t\t} else if (isObject(source)) {\n\t\t\tfor (let [key, value] of Object.entries(source)) {\n\t\t\t\tif (isObject(value) && Reflect.has(returnValue, key)) {\n\t\t\t\t\tvalue = deepMerge(returnValue[key], value);\n\t\t\t\t}\n\n\t\t\t\treturnValue = {...returnValue, [key]: value};\n\t\t\t}\n\t\t}\n\t}\n\n\treturn returnValue;\n};\n\nconst requestMethods = [\n\t'get',\n\t'post',\n\t'put',\n\t'patch',\n\t'head',\n\t'delete'\n];\n\nconst responseTypes = {\n\tjson: 'application/json',\n\ttext: 'text/*',\n\tformData: 'multipart/form-data',\n\tarrayBuffer: '*/*',\n\tblob: '*/*'\n};\n\nconst retryMethods = [\n\t'get',\n\t'put',\n\t'head',\n\t'delete',\n\t'options',\n\t'trace'\n];\n\nconst retryStatusCodes = [\n\t408,\n\t413,\n\t429,\n\t500,\n\t502,\n\t503,\n\t504\n];\n\nconst retryAfterStatusCodes = [\n\t413,\n\t429,\n\t503\n];\n\nconst stop = Symbol('stop');\n\nclass HTTPError extends Error {\n\tconstructor(response) {\n\t\tsuper(response.statusText);\n\t\tthis.name = 'HTTPError';\n\t\tthis.response = response;\n\t}\n}\n\nclass TimeoutError extends Error {\n\tconstructor() {\n\t\tsuper('Request timed out');\n\t\tthis.name = 'TimeoutError';\n\t}\n}\n\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n// `Promise.race()` workaround (#91)\nconst timeout = (promise, ms, abortController) =>\n\tnew Promise((resolve, reject) => {\n\t\tconst timeoutID = setTimeout(() => {\n\t\t\tif (abortController) {\n\t\t\t\tabortController.abort();\n\t\t\t}\n\n\t\t\treject(new TimeoutError());\n\t\t}, ms);\n\n\t\t/* eslint-disable promise/prefer-await-to-then */\n\t\tpromise\n\t\t\t.then(resolve)\n\t\t\t.catch(reject)\n\t\t\t.then(() => {\n\t\t\t\tclearTimeout(timeoutID);\n\t\t\t});\n\t\t/* eslint-enable promise/prefer-await-to-then */\n\t});\n\nconst normalizeRequestMethod = input => requestMethods.includes(input) ? input.toUpperCase() : input;\n\nconst defaultRetryOptions = {\n\tlimit: 2,\n\tmethods: retryMethods,\n\tstatusCodes: retryStatusCodes,\n\tafterStatusCodes: retryAfterStatusCodes\n};\n\nconst normalizeRetryOptions = (retry = {}) => {\n\tif (typeof retry === 'number') {\n\t\treturn {\n\t\t\t...defaultRetryOptions,\n\t\t\tlimit: retry\n\t\t};\n\t}\n\n\tif (retry.methods && !Array.isArray(retry.methods)) {\n\t\tthrow new Error('retry.methods must be an array');\n\t}\n\n\tif (retry.statusCodes && !Array.isArray(retry.statusCodes)) {\n\t\tthrow new Error('retry.statusCodes must be an array');\n\t}\n\n\treturn {\n\t\t...defaultRetryOptions,\n\t\t...retry,\n\t\tafterStatusCodes: retryAfterStatusCodes\n\t};\n};\n\n// The maximum value of a 32bit int (see issue #117)\nconst maxSafeTimeout = 2147483647;\n\nclass Ky {\n\tconstructor(input, options = {}) {\n\t\tthis._retryCount = 0;\n\t\tthis._input = input;\n\t\tthis._options = {\n\t\t\t// TODO: credentials can be removed when the spec change is implemented in all browsers. Context: https://www.chromestatus.com/feature/4539473312350208\n\t\t\tcredentials: this._input.credentials || 'same-origin',\n\t\t\t...options,\n\t\t\thooks: deepMerge({\n\t\t\t\tbeforeRequest: [],\n\t\t\t\tbeforeRetry: [],\n\t\t\t\tafterResponse: []\n\t\t\t}, options.hooks),\n\t\t\tmethod: normalizeRequestMethod(options.method || this._input.method),\n\t\t\tprefixUrl: String(options.prefixUrl || ''),\n\t\t\tretry: normalizeRetryOptions(options.retry),\n\t\t\tthrowHttpErrors: options.throwHttpErrors !== false,\n\t\t\ttimeout: typeof options.timeout === 'undefined' ? 10000 : options.timeout\n\t\t};\n\n\t\tif (typeof this._input !== 'string' && !(this._input instanceof URL || this._input instanceof globals.Request)) {\n\t\t\tthrow new TypeError('`input` must be a string, URL, or Request');\n\t\t}\n\n\t\tif (this._options.prefixUrl && typeof this._input === 'string') {\n\t\t\tif (this._input.startsWith('/')) {\n\t\t\t\tthrow new Error('`input` must not begin with a slash when using `prefixUrl`');\n\t\t\t}\n\n\t\t\tif (!this._options.prefixUrl.endsWith('/')) {\n\t\t\t\tthis._options.prefixUrl += '/';\n\t\t\t}\n\n\t\t\tthis._input = this._options.prefixUrl + this._input;\n\t\t}\n\n\t\tif (supportsAbortController) {\n\t\t\tthis.abortController = new globals.AbortController();\n\t\t\tif (this._options.signal) {\n\t\t\t\tthis._options.signal.addEventListener('abort', () => {\n\t\t\t\t\tthis.abortController.abort();\n\t\t\t\t});\n\t\t\t\tthis._options.signal = this.abortController.signal;\n\t\t\t}\n\t\t}\n\n\t\tthis.request = new globals.Request(this._input, this._options);\n\n\t\tif (this._options.searchParams) {\n\t\t\tconst url = new URL(this.request.url);\n\t\t\turl.search = new URLSearchParams(this._options.searchParams);\n\t\t\tthis.request = new globals.Request(new globals.Request(url, this.request), this._options);\n\t\t}\n\n\t\tif (this._options.json) {\n\t\t\tthis._options.body = JSON.stringify(this._options.json);\n\t\t\tthis.request.headers.set('content-type', 'application/json');\n\t\t\tthis.request = new globals.Request(this.request, {body: this._options.body});\n\t\t}\n\n\t\tconst fn = async () => {\n\t\t\tif (this._options.timeout > maxSafeTimeout) {\n\t\t\t\tthrow new RangeError(`The \\`timeout\\` option cannot be greater than ${maxSafeTimeout}`);\n\t\t\t}\n\n\t\t\tawait delay(1);\n\t\t\tlet response = await this._fetch();\n\n\t\t\tfor (const hook of this._options.hooks.afterResponse) {\n\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\tconst modifiedResponse = await hook(\n\t\t\t\t\tthis.request,\n\t\t\t\t\tthis._options,\n\t\t\t\t\tresponse.clone()\n\t\t\t\t);\n\n\t\t\t\tif (modifiedResponse instanceof globals.Response) {\n\t\t\t\t\tresponse = modifiedResponse;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!response.ok && this._options.throwHttpErrors) {\n\t\t\t\tthrow new HTTPError(response);\n\t\t\t}\n\n\t\t\t// If `onDownloadProgress` is passed, it uses the stream API internally\n\t\t\t/* istanbul ignore next */\n\t\t\tif (this._options.onDownloadProgress) {\n\t\t\t\tif (typeof this._options.onDownloadProgress !== 'function') {\n\t\t\t\t\tthrow new TypeError('The `onDownloadProgress` option must be a function');\n\t\t\t\t}\n\n\t\t\t\tif (!supportsStreams) {\n\t\t\t\t\tthrow new Error('Streams are not supported in your environment. `ReadableStream` is missing.');\n\t\t\t\t}\n\n\t\t\t\treturn this._stream(response.clone(), this._options.onDownloadProgress);\n\t\t\t}\n\n\t\t\treturn response;\n\t\t};\n\n\t\tconst isRetriableMethod = this._options.retry.methods.includes(this.request.method.toLowerCase());\n\t\tconst result = isRetriableMethod ? this._retry(fn) : fn();\n\n\t\tfor (const [type, mimeType] of Object.entries(responseTypes)) {\n\t\t\tresult[type] = async () => {\n\t\t\t\tthis.request.headers.set('accept', this.request.headers.get('accept') || mimeType);\n\t\t\t\tconst response = (await result).clone();\n\t\t\t\treturn (type === 'json' && response.status === 204) ? '' : response[type]();\n\t\t\t};\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t_calculateRetryDelay(error) {\n\t\tthis._retryCount++;\n\n\t\tif (this._retryCount < this._options.retry.limit && !(error instanceof TimeoutError)) {\n\t\t\tif (error instanceof HTTPError) {\n\t\t\t\tif (!this._options.retry.statusCodes.includes(error.response.status)) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\tconst retryAfter = error.response.headers.get('Retry-After');\n\t\t\t\tif (retryAfter && this._options.retry.afterStatusCodes.includes(error.response.status)) {\n\t\t\t\t\tlet after = Number(retryAfter);\n\t\t\t\t\tif (Number.isNaN(after)) {\n\t\t\t\t\t\tafter = Date.parse(retryAfter) - Date.now();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tafter *= 1000;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof this._options.retry.maxRetryAfter !== 'undefined' && after > this._options.retry.maxRetryAfter) {\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn after;\n\t\t\t\t}\n\n\t\t\t\tif (error.response.status === 413) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst BACKOFF_FACTOR = 0.3;\n\t\t\treturn BACKOFF_FACTOR * (2 ** (this._retryCount - 1)) * 1000;\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\tasync _retry(fn) {\n\t\ttry {\n\t\t\treturn await fn();\n\t\t} catch (error) {\n\t\t\tconst ms = Math.min(this._calculateRetryDelay(error), maxSafeTimeout);\n\t\t\tif (ms !== 0 && this._retryCount > 0) {\n\t\t\t\tawait delay(ms);\n\n\t\t\t\tfor (const hook of this._options.hooks.beforeRetry) {\n\t\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\t\tconst hookResult = await hook(\n\t\t\t\t\t\tthis.request,\n\t\t\t\t\t\tthis._options,\n\t\t\t\t\t\terror,\n\t\t\t\t\t\tthis._retryCount\n\t\t\t\t\t);\n\n\t\t\t\t\t// If `stop` is returned from the hook, the retry process is stopped\n\t\t\t\t\tif (hookResult === stop) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn this._retry(fn);\n\t\t\t}\n\n\t\t\tif (this._options.throwHttpErrors) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync _fetch() {\n\t\tfor (const hook of this._options.hooks.beforeRequest) {\n\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\tconst result = await hook(this.request, this._options);\n\n\t\t\tif (result instanceof Request) {\n\t\t\t\tthis.request = result;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (result instanceof Response) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\n\t\tif (this._options.timeout === false) {\n\t\t\treturn globals.fetch(this.request);\n\t\t}\n\n\t\treturn timeout(globals.fetch(this.request), this._options.timeout, this.abortController);\n\t}\n\n\t/* istanbul ignore next */\n\t_stream(response, onDownloadProgress) {\n\t\tconst totalBytes = Number(response.headers.get('content-length')) || 0;\n\t\tlet transferredBytes = 0;\n\n\t\treturn new globals.Response(\n\t\t\tnew globals.ReadableStream({\n\t\t\t\tstart(controller) {\n\t\t\t\t\tconst reader = response.body.getReader();\n\n\t\t\t\t\tif (onDownloadProgress) {\n\t\t\t\t\t\tonDownloadProgress({percent: 0, transferredBytes: 0, totalBytes}, new Uint8Array());\n\t\t\t\t\t}\n\n\t\t\t\t\tasync function read() {\n\t\t\t\t\t\tconst {done, value} = await reader.read();\n\t\t\t\t\t\tif (done) {\n\t\t\t\t\t\t\tcontroller.close();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (onDownloadProgress) {\n\t\t\t\t\t\t\ttransferredBytes += value.byteLength;\n\t\t\t\t\t\t\tconst percent = totalBytes === 0 ? 0 : transferredBytes / totalBytes;\n\t\t\t\t\t\t\tonDownloadProgress({percent, transferredBytes, totalBytes}, value);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontroller.enqueue(value);\n\t\t\t\t\t\tread();\n\t\t\t\t\t}\n\n\t\t\t\t\tread();\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n}\n\nconst validateAndMerge = (...sources) => {\n\tfor (const source of sources) {\n\t\tif ((!isObject(source) || Array.isArray(source)) && typeof source !== 'undefined') {\n\t\t\tthrow new TypeError('The `options` argument must be an object');\n\t\t}\n\t}\n\n\treturn deepMerge({}, ...sources);\n};\n\nconst createInstance = defaults => {\n\tconst ky = (input, options) => new Ky(input, validateAndMerge(defaults, options));\n\n\tfor (const method of requestMethods) {\n\t\tky[method] = (input, options) => new Ky(input, validateAndMerge(defaults, options, {method}));\n\t}\n\n\tky.create = newDefaults => createInstance(validateAndMerge(newDefaults));\n\tky.extend = newDefaults => createInstance(validateAndMerge(defaults, newDefaults));\n\tky.stop = stop;\n\n\treturn ky;\n};\n\nexport default createInstance();\n\nexport {\n\tHTTPError,\n\tTimeoutError\n};\n","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributePart, directive, PropertyPart } from '../lit-html.js';\n/**\n * Stores the StyleInfo object applied to a given AttributePart.\n * Used to unset existing values when a new StyleInfo object is applied.\n */\nconst styleMapCache = new WeakMap();\n/**\n * A directive that applies CSS properties to an element.\n *\n * `styleMap` can only be used in the `style` attribute and must be the only\n * expression in the attribute. It takes the property names in the `styleInfo`\n * object and adds the property values as CSS propertes. Property names with\n * dashes (`-`) are assumed to be valid CSS property names and set on the\n * element's style object using `setProperty()`. Names without dashes are\n * assumed to be camelCased JavaScript property names and set on the element's\n * style object using property assignment, allowing the style object to\n * translate JavaScript-style names to CSS property names.\n *\n * For example `styleMap({backgroundColor: 'red', 'border-top': '5px', '--size':\n * '0'})` sets the `background-color`, `border-top` and `--size` properties.\n *\n * @param styleInfo {StyleInfo}\n */\nexport const styleMap = directive((styleInfo) => (part) => {\n    if (!(part instanceof AttributePart) || (part instanceof PropertyPart) ||\n        part.committer.name !== 'style' || part.committer.parts.length > 1) {\n        throw new Error('The `styleMap` directive must be used in the style attribute ' +\n            'and must be the only part in the attribute.');\n    }\n    const { committer } = part;\n    const { style } = committer.element;\n    // Handle static styles the first time we see a Part\n    if (!styleMapCache.has(part)) {\n        style.cssText = committer.strings.join(' ');\n    }\n    // Remove old properties that no longer exist in styleInfo\n    const oldInfo = styleMapCache.get(part);\n    for (const name in oldInfo) {\n        if (!(name in styleInfo)) {\n            if (name.indexOf('-') === -1) {\n                // tslint:disable-next-line:no-any\n                style[name] = null;\n            }\n            else {\n                style.removeProperty(name);\n            }\n        }\n    }\n    // Add or update properties\n    for (const name in styleInfo) {\n        if (name.indexOf('-') === -1) {\n            // tslint:disable-next-line:no-any\n            style[name] = styleInfo[name];\n        }\n        else {\n            style.setProperty(name, styleInfo[name]);\n        }\n    }\n    styleMapCache.set(part, styleInfo);\n});\n//# sourceMappingURL=style-map.js.map","/**\n * Import LitElement base class, html helper function,\n * and TypeScript decorators\n **/\nimport {\n  LitElement, html, customElement, property, css,\n} from 'lit-element';\n\nimport { styleMap } from 'lit-html/directives/style-map';\n\n/**\n * Use the customElement decorator to define your class as\n * a custom element. Registers <my-element> as an HTML tag.\n */\n@customElement('pill-element')\nexport class pillTemplate extends LitElement {\n\n  /**\n   * Create an observed property. Triggers update on change.\n   */\n  @property({type : String})  imageUrl;\n  @property({type : String})  label;\n  @property({type : String})  backgroundColor;\n  @property({type : String})  textColor;\n  @property({type : String})  border = 'none';\n  @property({type : Object})  customStyles = {\n                                backgroundColor: this.backgroundColor,\n                                color: this.textColor,\n                                border: this.border\n                              };\n\n\n  // @TODO: Add dynamic styles using styleMap directive\n  // @TODO: Add dynamic style text color\n  // @TODO: Add dynamic style border & border color\n  static get styles() {\n    return css`\n      .pill {\n        display: flex;\n        /* grid-template-columns: 1fr 2fr; */\n        border: 1px solid #E2E6EF;\n        box-sizing: border-box;\n        border-radius: 60px;\n        width: 100%;\n        height: 100%;\n        padding: 2px;\n      }\n      .pill img {\n        height: 100%;\n        border-radius: 50px;\n        /* width: 100%; */\n        /* padding: 3px; */\n        /* box-sizing: border-box; */\n      }\n      .pill p {\n        text-align: center;\n        align-self: center;\n        margin: auto;\n         /* Centers text since grid-template-columns auto has glitch */\n        /* transform: translateX(-10%); */\n        backface-visibility: inherit;\n      }\n      .no-img {\n        grid-template-columns: 100%;\n      }\n      .no-img p {\n         /* Reverts transform (see above) */\n        /* transform: none; */\n      }\n    `;\n  }\n\n  /**\n   * Implement `render` to define a template for your element.\n   */\n  render() {\n    /**\n     * Use JavaScript expressions to include property values in\n     * the element template.\n     */\n    return html`\n    <div class=\"pill ${this.imageUrl ? '' : 'no-img'}\"\n      style=\"${styleMap({backgroundColor: this.backgroundColor,\n          color: this.textColor, border: this.border})}\">\n      ${this.imageUrl ? html`<img src=\"${this.imageUrl}\"></img>` : ''}\n      <p>${this.label}</p>\n    </div>`;\n  }\n}\n","/**\n * Import LitElement base class, html helper function,\n * and TypeScript decorators\n **/\nimport {\n  LitElement, html, customElement, property, css,\n} from 'lit-element';\n\n// import '@polymer/iron-icon/iron-icon.js';\n// import '@polymer/iron-icons/iron-icons.js';\n\n/**\n * Use the customElement decorator to define your class as\n * a custom element. Registers <nft-card-front> as an HTML tag.\n */\n@customElement('nft-card-front')\nexport class NftCardFrontTemplate extends LitElement {\n\n  @property({type : Object})   asset = {};\n\n  constructor() {\n    super();\n    // We got the data so we are done loading\n    this.loading = true;\n  }\n\n  static get styles() {\n    return css`\n      .card-front {\n        position: absolute;\n        backface-visibility: hidden;\n        background: #FFFFFF;\n        border-radius: 5px;\n        display: grid;\n        grid-template-columns: 1fr 2fr;\n        position: relative;\n        width: 100%;\n        height: 100%;\n        /* Remove when done with back face */\n        /* display: none; */\n\n      }\n      .card-front p {\n        margin: 0;\n      }\n      .asset-image-container {\n        border-right: 1px solid #E2E6EF;\n      }\n      .asset-image-container img {\n        width: 100%;\n      }\n      .asset-details-container {\n        display: grid;\n        grid-template-rows: auto auto auto;\n        grid-template-columns: 2fr 3fr;\n        margin: 25px;\n        align-items: center;\n      }\n      .asset-detail {\n        display: flex;\n      }\n      .asset-detail .asset-detail-type {\n        width: 115px;\n        height: 30px;\n        font-size: 12px;\n        margin-right: 10px;\n      }\n      .asset-detail .asset-detail-badge {\n        width: 54px;\n        height: 30px;\n        font-size: 12px;\n      }\n      .asset-detail-name {\n        font-weight: 300;\n        text-align: left;\n      }\n      .asset-detail-price {\n        text-align: right;\n      }\n      .asset-detail-price-current {\n        font-size: 18px;\n        font-weight: 400;\n      }\n      .asset-detail-price-previous {\n        font-size: 14px;\n        color: #828282;\n      }\n      .asset-action-buy {\n        grid-column-start: 1;\n        grid-column-end: 3;\n      }\n      .asset-action-buy button {\n        width: 100%;\n        background: #3291E9;\n        border-radius: 5px;\n        height: 35px;\n        color: white;\n        font-weight: bold;\n        letter-spacing: .5px;\n        cursor: pointer;\n        transition: 200ms;\n        outline: none;\n        border-style: none;\n      }\n      .asset-action-buy button:hover {\n        background: rgb(21, 61, 98);\n      }\n      .asset-action-info {\n        position: absolute;\n        right: 10px;\n        top: 10px;\n\n      }\n      .asset-action-info #info-icon {\n        cursor: pointer;\n        transition: 200ms;\n        opacity: .4;\n        backface-visibility: hidden;\n      }\n      .asset-action-info #info-icon:hover {\n        opacity: 1;\n      }\n    `;\n  }\n\n  /**\n   * eventHandler - Dispatch event allowing parent to handle click event\n   *\n   * @param  {Object} e the event context\n   * @param  {string} type the event context\n   * @param  {Object} data the event context\n   */\n  eventHandler(e, type, data = {}) {\n    const event = new CustomEvent('new-event', {\n      detail: {\n        type,\n        data\n      }\n    });\n    this.dispatchEvent(event);\n  }\n\n  connectedCallback() {\n    super.connectedCallback()\n    // setTimeout(() => this.eventHandler('','flip'), 10);\n    console.warn('I flip card for testing remove me later')\n  }\n\n  updated(changedProperties: array) {\n    // Assumption: If the traitData gets updated we should rebuild the\n    // traits object that populates UI\n    // Assumption: This will ONLY get called once per refresh\n    changedProperties.forEach((oldValue, propName) => {\n      if(propName === 'asset') {\n\n        // We got the data so we are done loading\n        this.loading = false;\n\n        // Tell the component to update with new state\n        this.requestUpdate();\n      }\n    });\n  }\n\n    getAssetImageTemplate(imageUrl) {\n      return (html`\n        <div class=\"asset-image-container\">\n          <img src=\"${imageUrl}\" />\n        </div>\n      `)\n    }\n\n  /**\n   * Implement `render` to define a template for your element.\n   */\n  render() {\n    if(this.isLoading) return html``\n    return html`\n      <div class=\"card-front\">\n        <div class=\"asset-action-info\">\n        <svg id=\"info-btn\" @click=\"${(e) => this.eventHandler(e, 'flip')}\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"white\"/><path id=\"info-icon\"fill=\"rgb(82, 87, 89)\" d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z\"/></svg></div>\n        ${this.getAssetImageTemplate(this.asset.image_url)}\n        <div class=\"asset-details-container\">\n          <div class=\"asset-detail\">\n            <div class=\"pill-container asset-detail-type\">\n              <pill-element\n                .imageUrl=${this.asset.asset_contract.image_url}\n                .label=${this.asset.asset_contract.name}\n                textColor=\"#828282\"\n                border=\"1px solid #E2E6EF\"\n              ></pill-element>\n            </div>\n            <!-- TODO: This badge is optional and must be rendered programmatically -->\n            <!-- <div class=\"pill-container asset-detail-badge\">\n              <pill-element\n                label=\"New\"\n                backgroundColor=\"#23DC7D\"\n                textColor=\"#FFFFFF\"\n              ></pill-element>\n            </div> -->\n          </div>\n          <div class=\"spacer\"></div>\n          <div class=\"asset-detail-name\">\n            <p>${this.asset.name}</p>\n\n          </div>\n          <div class=\"asset-detail-price\">\n            <div class=\"asset-detail-price-current\">Ξ 0.04</div>\n            <div class=\"asset-detail-price-previous\">Prev. Ξ 0.04</div>\n          </div>\n          <div class=\"asset-action-buy\">\n            <button @click=\"${(e) => this.eventHandler(e, 'buy', {buy: 'buyit'})}\" >BUY THIS ITEM ❯</button>\n          </div>\n\n        </div>\n      </div>\n    `;\n  }\n}\n","import {\n  LitElement, html, customElement, property, css\n} from 'lit-element';\nimport { styleMap } from 'lit-html/directives/style-map';\n\nenum TraitType {\n    Property = 'prop',\n    Stat = 'stat',\n    Ranking = 'ranking',\n    Boost = 'boost',\n}\n\n@customElement('nft-card-back')\nexport class NftCardBackTemplate extends LitElement {\n\n  /**\n   * Create an observed property. Triggers update on change.\n   */\n  @property({type : Object})   traitData = {};\n  @property({type : Boolean})   loading = true;\n  constructor() {\n    super();\n\n    // We got the data so we are done loading\n    // this.loading = true;\n\n    // Get the height of the card\n    // this.cardHeight = this.shadowRoot.firstElementChild.offsetHeight;\n  }\n\n  private buildTraits(traitData) {\n      this.traits = {\n          props: [],\n          stats: [],\n          rankings: [],\n          boosts: []\n      }\n      const {traits, collectionTraits} = this.traitData\n\n      for(let trait of traits) {\n        const type = this.getTraitType(trait, collectionTraits)\n        const name = trait.trait_type\n        this.traits[type + 's'].push({\n          name,\n          value: trait.value,\n          ...(type === TraitType.Ranking ? { max: collectionTraits[name].max } : {})\n      })\n      }\n\n\n      console.log(this.traits)\n  }\n\n  private getTraitType(trait: object, collectionTraits: object) {\n    if(this.isProperty(trait, collectionTraits)) return TraitType.Property\n    if(this.isStat(trait)) return TraitType.Stat\n    if(this.isRanking(trait, collectionTraits)) return TraitType.Ranking\n    if(this.isBoost(trait)) return TraitType.Boost\n  }\n\n  private isBoost(trait: object) {\n    return trait.display_type === 'boost_number'\n  }\n\n  private isRanking(trait: object, collectionTraits: object) {\n    return trait.display_type === null && 'max' in collectionTraits[trait.trait_type]\n  }\n\n\n  /**\n   * isStat - Checks to see if the given trait is a 'Stat'\n   * A 'Stat' is defined as any trait that has a `display_type` of 'number'\n   *\n   * @param  {type} trait - The object containing an asset's trait\n   * @return {boolean} true if the trait is a 'Stat' and false otherwise\n   */\n  private isStat(trait: object) {\n    return trait.display_type === 'number'\n  }\n\n  /**\n   * isProperty - Checks to see if the given trait is a 'Property'.\n   * A 'Property' is defined as any trait that has a `display_type` of null\n   * and does not have a min/max value\n   *\n   * @param  {object} trait - The object containing an asset's trait\n   * @return {boolean} true if the trait is a 'Property' and false otherwise\n   */\n  private isProperty(trait: object, collectionTraits: object) {\n    return trait.display_type === null && !('max' in collectionTraits[trait.trait_type])\n  }\n\n  updated(changedProperties: array) {\n    // Assumption: If the traitData gets updated we should rebuild the\n    // traits object that populates UI\n    // Assumption: This will ONLY get called once per refresh\n    changedProperties.forEach((oldValue, propName) => {\n      if(propName === 'traitData') {\n\n        this.buildTraits(this.traitData)\n\n        // We got the data so we are done loading\n        this.loading = false;\n\n        // Tell the component to update with new state\n        this.requestUpdate();\n      }\n    });\n    // console.log(this.shadowRoot.firstElementChild.offsetHeight)\n  }\n\n\n  // @TODO: Add dynamic styles based on orientation prop\n  static get styles() {\n    return css`\n      .card-back {\n        position: absolute;\n        backface-visibility: hidden;\n        width: 100%;\n        height: 100%;\n        transform: rotateY(180deg);\n        top: 0;\n        overflow: initial;\n      }\n      .card-back p {\n        margin: 10px;\n      }\n      .card-back-inner {\n        display: grid;\n        grid-template-columns: 1fr 1fr 1fr;\n        column-gap: 10px;\n        margin: 16px 24px;\n      }\n      .attribute-container {\n        text-align: left;\n      }\n      .trait-header {\n        display: flex;\n        font-size: 14px;\n        color: rgba(0,0,0,.87);\n        font-weight: 700;\n        letter-spacing: 1px;\n        text-transform: uppercase;\n        border-bottom: 1px solid rgba(0,0,0,.1);\n        line-height: 20px;\n        margin-bottom: 8px;\n      }\n      .trait-header p {\n        margin: 0 0 10px 8px;\n      }\n      .trait-icon {\n        height: 100%;\n      }\n      .trait_property {\n        background: #EDFBFF;\n        border: 1px solid #2D9CDB;\n        border-radius: 5px;\n        margin-bottom: 8px;\n        display: grid;\n        grid-template-columns: 50% 50%;\n      }\n      .trait_property p {\n        margin: 7px 0;\n        font-weight: 400;\n        font-size: 15px;\n        color: rgba(0,0,0,.87);\n      }\n      .trait_property .trait_property-type {\n        text-transform: uppercase;\n        font-weight: 500;\n        color: #2d9cdb;\n        opacity: .8;\n        margin: 7px 10px;\n      }\n      .trait_property .trait_property-value {\n        overflow: hidden;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n      }\n      .trait_ranking {\n        margin-bottom: 8px;\n        cursor: pointer;\n        padding-bottom: 8px;\n      }\n      .trait_ranking .trait_ranking-header {\n        display: flex;\n        justify-content: space-between;\n      }\n      .trait_ranking .trait_ranking-header .trait_ranking-header-name {\n        color: rgba(0,0,0,.87);\n        font-size: 14px;\n      }\n\n      .trait_ranking .trait_ranking-header .trait_ranking-header-value {\n        color: #9e9e9e;\n        font-size: 11px;\n      }\n      .trait_ranking .trait_ranking-bar {\n        width: 100%;\n        height: 6px;\n        border-radius: 14px;\n        box-shadow: inset 0 0 0 1px rgba(0,0,0,.1);\n        position: relative;\n        background: #f3f3f3;\n        margin-top: 4px;\n      }\n\n      .trait_ranking .trait_ranking-bar .trait_ranking-bar-fill {\n        position: absolute;\n        left: 1px;\n        top: 1px;\n        height: 4px;\n        background: #3291e9;\n        border-radius: 14px;\n        max-width: calc(100% - 2px);\n      }\n\n      .stat {\n        display: grid;\n        grid-template-columns: 1fr 4fr;\n        justify-items: center;\n        align-items: center;\n        border-bottom: 1px solid rgba(0, 0, 0, 0.2);\n      }\n      .stat-name {\n        font-size: 20px;\n        font-weight: 100;\n        text-transform: capitalize;\n        justify-self: left;\n        margin-left: 5px;\n      }\n      .stat-value {\n        color: #2D9CDB;\n        font-size: 34px;\n        font-weight: 100;\n      }\n      .trait_boost {\n        display: flex;\n        align-items: center;\n        border-bottom: 1px solid rgba(0,0,0,.1);\n        margin-bottom: 8px;\n        padding-bottom: 8px;\n      }\n      .trait_boost .trait_boost-value {\n        width: 30px;\n        height: 30px;\n        background-color: #2d9cdb;\n        border-radius: 50%;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        margin-right: 10px;\n      }\n      .trait_boost .trait_boost-value p {\n        font-size: 12px;\n        color: #ffffff;\n      }\n    `;\n  }\n\n  getBoostsTemplate(boosts) {\n    return (html`\n      ${boosts.map( ({name, value}) => html`\n        <div class=\"trait_boost\">\n          <div class=\"trait_boost-value\">\n            <p>+${value}</p>\n          </div>\n          <div class=\"trait_boost-name\">\n            ${name}\n          </div>\n        </div>\n        `)}\n    `)\n  }\n\n  _getStatsTemplate(stats) {\n    if(stats) return\n    // TODO: Add more checks here for robustness\n    return html`\n      ${stats.map(\n        stat => stat.display_type !== 'number' ? '' : html`<div class=\"stat\"><div class=\"stat-value\">${stat.value}</div><div class=\"stat-name\">${stat.trait_type.replace(/_/g, ' ')}</div></div>`)}\n    `\n  }\n\n  getStatsTemplate(stats) {\n    return (html`\n      <div class=\"trait-header\">\n        <div class=\"trait-icon\">\n          <svg width=\"15\" height=\"100%\" viewBox=\"0 0 12 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M4.66666 11.3333H7.33332V0.666672H4.66666V11.3333ZM0.666656 11.3333H3.33332V6H0.666656V11.3333ZM8.66666 4V11.3333H11.3333V4H8.66666Z\" fill=\"black\"/></svg>\n        </div>\n      </div>\n\n    `)\n  }\n\n  getRankingsTemplate(rankings) {\n    let i = 0;\n    return (html`\n      <div class=\"trait-header\">\n        <div class=\"trait-icon\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"100%\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zm4.24 16L12 15.45 7.77 18l1.12-4.81-3.73-3.23 4.92-.42L12 5l1.92 4.53 4.92.42-3.73 3.23L16.23 18z\"/></svg>\n        </div>\n        <p class=\"attribute-title\">Rankings</p>\n      </div>\n      ${rankings.map(({name, value, max}) => html`\n        <div class=\"trait_ranking\">\n          <div class=\"trait_ranking-header\">\n            <div class=\"trait_ranking-header-name\">${name}</div>\n            <div class=\"trait_ranking-header-value\">${value} of ${max}</div>\n          </div>\n          <div class=\"trait_ranking-bar\">\n            <div class=\"trait_ranking-bar-fill\" style=${styleMap({width: `${(value / max) * 100 }%`})}></div>\n          </div>\n        </div>\n      `)}\n    `)\n  }\n\n  getPropsTemplate(props) {\n    console.log(props)\n    return (html`\n      ${props.map( prop => html`\n        <div class=\"trait_property\">\n          <p class=\"trait_property-type\">${prop.name}</p>\n          <p class=\"trait_property-value\">${prop.value}</p>\n        </div>\n        `)}\n    `)\n  }\n\n  transformTrait(trait) {\n    return trait.replace(/_/g, ' ')\n  }\n\n  /**\n   * Implement `render` to define a template for your element.\n   */\n  render(){\n    // TODO: Add loading templates\n    return html`\n      <div class=\"card-back\">\n        <div class=\"card-back-inner\">\n          <div class=\"attribute-container attribute-properties\">\n            <div class=\"trait-header\">\n              <div class=\"trait-icon\">\n                <svg width=\"18\" height=\"100%\" viewBox=\"0 0 12 8\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 2.00001H9.33333V0.666672H0V2.00001ZM0 4.66667H9.33333V3.33334H0V4.66667ZM0 7.33334H9.33333V6H0V7.33334ZM10.6667 7.33334H12V6H10.6667V7.33334ZM10.6667 0.666672V2.00001H12V0.666672H10.6667ZM10.6667 4.66667H12V3.33334H10.6667V4.66667Z\" fill=\"#1C1F27\"/></svg>\n              </div>\n              <p class=\"attribute-title\">Properties</p>\n            </div>\n            ${this.loading ? '' : this.getPropsTemplate(this.traits.props)}\n          </div>\n          <!-- TODO: Add conditional class based on if it's a rank or stat -->\n          <div class=\"attribute-container\">\n              ${\n                this.loading ? 'loadingTemplate()' :\n                this.traits.rankings.length > 0 ? this.getRankingsTemplate(this.traits.rankings)\n                : this.getStatsTemplate(this.traits.stats)\n              }\n          </div>\n          <div class=\"attribute-container attribute-boosts\">\n            <div class=\"trait-header\">\n              <div class=\"trait-icon\">\n                <svg width=\"10\" height=\"100%\" viewBox=\"0 0 8 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0.666656 0.333336V7.66667H2.66666V13.6667L7.33332 5.66667H4.66666L7.33332 0.333336H0.666656Z\" fill=\"#1C1F27\"/></svg>\n              </div>\n              <p class=\"attribute-title\">Boosts</p>\n            </div>\n            ${this.loading ? 'loadingTemplate()' : this.getBoostsTemplate(this.traits.boosts)}\n          </div>\n        </div>\n      </div>\n    `;\n  }\n}\n","import {\n  LitElement, html, customElement, property, css\n} from 'lit-element';\n\nimport { classMap } from 'lit-html/directives/class-map';\nimport ky from 'ky';\n\nimport './pill.ts';\nimport './nft-card-front.ts';\nimport './nft-card-back.ts';\n\n// import { OpenSeaPort, Network } from 'opensea-js'\n\ninterface Images {\n    main: string;\n    [key:string]: string;\n}\n\n/**\n * nft-card element that manages front & back of card.\n * Facilitates aquisition and distribution data between\n * components.\n * Registers <nft-card> as an HTML tag.\n */\n@customElement('nft-card')\nexport class NftCard extends LitElement {\n\n  @property({type : String})  orientation = 'vertical';\n  @property({type : String})  flippedCard = false;\n\n  @property({type : Boolean})  loading = true;\n\n  /******* For Testing *******/\n  @property({type : Object})  asset = {};\n  @property({type : Object})  traitData = {};\n  /******* For Testing *******/\n\n  // public loading: boolean;\n\n  constructor() {\n    super();\n    // this.loading = true;\n    // this.seaPort = new OpenSeaPort()\n  }\n\n\n  async getAsset(contractAddress, tokenId) {\n    // TODO: Change to live request - handle errors\n    // console.log(await this.seaPort.getAsset('0x5caebd3b32e210e85ce3e9d51638b9c445481567', 2242579050293992223))\n    return ky.get('./war-rider-nft.json').json();\n  }\n\n\n  /**\n   * connectedCallback - Invoked when a component is added to the document’s DOM.\n   * Grabs data from the OpenSea SDK and populates data objects to be passed to\n   * child components.\n   */\n  async connectedCallback() {\n    super.connectedCallback()\n    this.asset = await this.getAsset('', '')\n    this.traitData = {\n      traits: this.asset.traits,\n      collectionTraits: this.asset.collection.traits\n    }\n    // We got the data so we are done loading\n    this.loading = false;\n\n    // Tell the component to update with new state\n    this.requestUpdate();\n  }\n\n  // @TODO: Add dynamic styles based on orientation prop\n  static get styles() {\n    return css`\n        p {\n          margin: 0;\n          -webkit-font-smoothing: antialiased;\n        }\n        .card {\n          background-color: transparent;\n          font-family: Avenir Next, Avenir, Helvetica Neue, sans-serif;\n          font-style: normal;\n          font-weight: normal;\n          border-radius: 5px;\n          perspective: 1000px;\n       }\n       .card-inner {\n          position: relative;\n          width: 100%;\n          height: 100%;\n          text-align: center;\n          transition: transform 0.6s;\n          transform-style: preserve-3d;\n          box-shadow: 0px 1px 6px rgba(0, 0, 0, 0.25);\n          border-radius: 5px;\n          min-height: 160px;\n      }\n      .flipped-card .card-inner {\n        transform: rotateY(180deg);\n      }\n    `;\n  }\n\n  buyEvent(data) {\n    console.log(data)\n  }\n\n  flipCard(data) {\n    this.flippedCard = !this.flippedCard;\n  }\n\n  eventHandler(event) {\n    const { detail } = event\n    switch(detail.type) {\n      case 'buy': this.buyEvent(detail.data); break;\n      case 'flip': this.flipCard(); break;\n    }\n  }\n\n  /**\n   * Implement `render` to define a template for your element.\n   */\n  render() {\n    /**\n     * Use JavaScript expressions to include property values in\n     * the element template.\n     */\n    return html`\n\n      <style>\n        @import url('https://fonts.googleapis.com/css?family=Roboto:100,300,400,500&display=swap');\n      </style>\n      <div class=\"card ${this.flippedCard ? 'flipped-card' : ''}\">\n        <div class=\"card-inner\">\n          ${this.loading ? html`loading` : html`\n            <nft-card-front @new-event=\"${this.eventHandler}\" .asset=${this.asset} ></nft-card-front>\n            <nft-card-back .traitData=${this.traitData} ></nft-card-back>`\n          }\n        </div>\n      </div>\n    `;\n  }\n}\n"],"names":["directives","WeakMap","isDirective","o","has","isCEPolyfill","undefined","window","customElements","polyfillWrapFlushCallback","removeNodes","container","start","end","n","nextSibling","removeChild","noChange","nothing","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","Template","[object Object]","result","element","this","parts","nodesToRemove","stack","walker","document","createTreeWalker","content","lastPartIndex","index","partIndex","strings","values","length","node","nextNode","nodeType","hasAttributes","attributes","count","i","endsWith","name","stringForPart","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","attributeValue","getAttribute","removeAttribute","statics","split","push","type","tagName","currentNode","data","indexOf","parent","parentNode","lastIndex","insert","s","createMarker","match","createTextNode","insertBefore","previousSibling","pop","str","suffix","isTemplatePartActive","part","createComment","TemplateInstance","template","processor","options","__parts","setValue","commit","fragment","cloneNode","importNode","nodeIndex","nodeName","handleTextExpression","insertAfterNode","handleAttributeExpressions","adoptNode","upgrade","commentMarker","TemplateResult","l","html","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","substr","createElement","innerHTML","getHTML","isPrimitive","value","isIterable","Array","isArray","Symbol","iterator","AttributeCommitter","dirty","_createPart","AttributePart","text","v","t","setAttribute","_getValue","committer","directive","NodePart","__pendingValue","startNode","appendChild","endNode","ref","__insert","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","clear","valueAsString","templateFactory","update","instance","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","BooleanAttributePart","Error","PropertyCommitter","super","single","PropertyPart","eventOptionsSupported","capture","addEventListener","removeEventListener","_e","EventPart","eventName","eventContext","__boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","once","passive","shouldAddListener","__options","getOptions","event","call","defaultTemplateProcessor","prefix","templateCache","templateCaches","get","stringsArray","keyString","Map","set","key","join","getTemplateElement","removeNodesFromTemplate","nextActiveIndexInTemplateParts","removeCount","nodesToRemoveInTemplate","currentRemovingNode","forEach","countNodes","startIndex","getTemplateCacheKey","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","console","warn","shadyTemplateFactory","cacheKey","TEMPLATE_TYPES","shadyRenderSet","Set","prepareTemplateStyles","renderedDOM","add","templateElement","styles","querySelectorAll","condensedStyle","style","textContent","templates","from","removeStylesFromLitTemplates","refNode","insertCount","walkerIndex","insertNodeIntoTemplate","firstChild","querySelector","nativeShadow","removes","JSCompiler_renameProperty","prop","_obj","defaultConverter","Boolean","Object","JSON","stringify","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","converter","reflect","hasChanged","microtaskPromise","Promise","resolve","UpdatingElement","HTMLElement","_updateState","_instanceProperties","_updatePromise","_hasConnectedResolver","_changedProperties","_reflectingProperties","initialize","observedAttributes","finalize","_classProperties","p","attr","_attributeNameForProperty","_attributeToPropertyMap","hasOwnProperty","superProperties","getPrototypeOf","k","_ensureClassProperties","noAccessor","prototype","defineProperty","oldValue","_requestUpdate","configurable","enumerable","superCtor","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","fromAttribute","toAttribute","_saveInstanceProperties","constructor","_v","_attributeToProperty","ctor","attrValue","_propertyValueToAttribute","propName","_propertyValueFromAttribute","shouldRequestUpdate","_valueHasChanged","_hasRequestedUpdate","_enqueueUpdate","updateComplete","reject","previousUpdatePromise","res","rej","_hasConnected","performUpdate","hasUpdated","_applyInstanceProperties","shouldUpdate","changedProperties","_markUpdated","firstUpdated","updated","_getUpdateComplete","size","_propertyToAttribute","customElement","classOrDescriptor","clazz","define","legacyCustomElement","descriptor","kind","elements","standardCustomElement","standardProperty","placement","initializer","assign","property","protoOrDescriptor","proto","legacyProperty","supportsAdoptingStyleSheets","Document","CSSStyleSheet","constructionToken","CSSResult","cssText","safeToken","styleSheet","_styleSheet","replaceSync","css","reduce","acc","idx","textFromCSSResult","flattenStyles","flat","Infinity","arrayFlat","LitElement","_styles","_getUniqueStyles","userStyles","reduceRight","unshift","renderRoot","createRenderRoot","ShadowRoot","adoptStyles","attachShadow","mode","adoptedStyleSheets","map","_needsShimAdoptedStyleSheets","ScopingShim","prepareAdoptedCssText","localName","connectedCallback","styleElement","templateResult","render","hasRendered","needsScoping","host","firstScopeRender","renderContainer","createDocumentFragment","appendInto","litRender","delete","global","self","globals","getGlobal","globalThis","globalProperties","globalObject","bind","isObject","supportsAbortController","AbortController","supportsStreams","ReadableStream","deepMerge","sources","returnValue","source","entries","Reflect","requestMethods","responseTypes","json","formData","arrayBuffer","blob","retryAfterStatusCodes","stop","HTTPError","response","statusText","TimeoutError","delay","ms","setTimeout","normalizeRequestMethod","input","includes","toUpperCase","defaultRetryOptions","limit","methods","statusCodes","afterStatusCodes","normalizeRetryOptions","retry","Ky","_retryCount","_input","_options","credentials","hooks","beforeRequest","beforeRetry","afterResponse","method","prefixUrl","throwHttpErrors","timeout","URL","Request","TypeError","startsWith","abortController","signal","abort","request","searchParams","url","search","URLSearchParams","body","headers","fn","async","RangeError","_fetch","hook","modifiedResponse","clone","Response","ok","onDownloadProgress","_stream","_retry","mimeType","status","error","retryAfter","after","isNaN","Date","now","maxRetryAfter","min","_calculateRetryDelay","fetch","promise","timeoutID","then","catch","clearTimeout","totalBytes","transferredBytes","controller","reader","getReader","percent","Uint8Array","read","done","close","byteLength","enqueue","validateAndMerge","createInstance","defaults","ky","create","newDefaults","extend","styleMapCache","styleMap","f","styleInfo","oldInfo","removeProperty","setProperty","args","d","backgroundColor","color","textColor","border","imageUrl","label","NftCardFrontTemplate","loading","CustomEvent","detail","dispatchEvent","requestUpdate","isLoading","eventHandler","getAssetImageTemplate","asset","image_url","asset_contract","buy","TraitType","traitData","traits","stats","rankings","boosts","collectionTraits","trait","getTraitType","trait_type","Ranking","max","log","isProperty","Property","isStat","Stat","isRanking","isBoost","Boost","display_type","buildTraits","stat","replace","width","getPropsTemplate","getRankingsTemplate","getStatsTemplate","getBoostsTemplate","NftCard","contractAddress","tokenId","getAsset","collection","flippedCard","buyEvent","flipCard"],"mappings":"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"}